@startuml
'skinparam linetype ortho
skinparam BackgroundColor #EEE
skinparam linetype ortho


skinparam class {
    AttributeIconSize 0
    BackgroundColor #E5E5E5
    ArrowColor #222
    ArrowThickness 1.5
    BorderColor #666
}

class GameManager implements Serializable {
    - running_save: GameInstance
    - all_saves: ArrayList<GameInstance>
    + save(): void
    + load(): void
    + serialise(): void
    + deserialise(): GameManager
    {static}- serialVersionUID: long
}

class GameInstance implements Serializable{
    'main class, contains everything relevant to the starting/stopping of the game.
    + helmet_list: ArrayList<Helmet>
    - hero: Hero
    - gamemap: ArrayList<GameObject>
    - coin_count: int

    + start(): void
    + stop(): void
    + pause(): void
    + resume(): void
    + exit(): void
    + resurrect(): void
    + game_over(): void
    + win(): void
}

abstract class GameObject implements Serializable{
    - pos[]: float[2]
    - vel[]: float[2]
    - acc[]: float[2]

    + get_pos(): float[2]
    + set_vel(axis: int, value: float): void
    + set_acc(axis: int, value: float): void
    + move(): void
    + render(): void
    + derender(): void
}

class Hero extends GameObject implements Collidable{
    'contains player information: high scores, save games, etc
    'for serialisation/deserialisation(?)
    - available_weapons[]: Weapon[]
    - current_weapon: Weapon
    - current_helmet: Helmet
    - is_alive: boolean
    - resurrected: boolean
    - current_game: GameInstance

    {method} <i>@Override</i>
    + collide(other: Collidable): void

    + add_coins(coin_count: int)
    + die(): void
    + get_helmet(): Helmet
    + is_alive(): boolean
    + resurrect(): void
    + equip_helmet(helm: Helmet): void
    + equip_weapon(weapon: Weapon): void
}

interface Collidable <<interface>>{
    + <i>collide(other: Collidable): void</i>
}

abstract class Chest extends GameObject implements Collidable{
    + <i>collect_chest(hero: Hero): void</i>
}

abstract class Orc extends GameObject implements Collidable{
    - hit_endurance: int
    - is_alive: boolean
    - coin_drop: int
    - dialogues: String[]
    - size: float
    - sprite: String

    {method}<i>@Override</i>
    +collide(other: Collidable): void

    + die(hero: Hero): void
    + get_hit_by_weapon(weapon: FlyingWeapon): void
    + is_alive(): boolean
    + smash_hero(hero: Hero): void
    + call_out(): void
}
class GreenOrc extends Orc{

}
class RedOrc extends Orc{
}
class BossGreenOrc extends Orc{
    {method} <i>@Override</i>
    +collide(other: Collidable): void
}

class WeaponChest extends Chest{
    - weapon: Weapon
    {method} <i>@Override</i>
    collect_chest(hero: Hero): void
}
class CoinChest extends Chest{
    - coins_number: int
    {method} <i>@Override</i>
    collect_chest(hero: Hero): void
}

class Weapon implements Collectable, Serializable{
    - level: int
    {method}<i>@Override</i>
    + get_collected(hero: Hero): void

    + use(): int
    + upgrade(): void
}

class FlyingWeapon extends GameObject implements Collidable{
    - category: Weapon
    {method}<i>@Override</i>
    + collide(other: Collidable): void
}

class Coin extends GameObject implements Collectable {
    {method}<i>@Override</i>
    + get_collected(hero: Hero): void
}

interface Collectable <<interface>>{
    + get_collected(hero: Hero):void
}

class Platform extends GameObject implements Collidable{
    'boundaries of platform
    -start_position: int
    -end_position: int
    {method}<i>@Override</i>
    + collide(other: Collidable): void
}

class FallingPlatform extends Platform {
    - collapse_rate: float
    'starting y-ward vel / acc
    - collapse_motion: float[2]
    + collapse(): void
}

class Helmet implements Serializable{
    - weapon_options: Weapon[2]
    + get_weapon_options(): Weapon[]
}


hide IOException members
hide ClassNotFoundException members
hide circle

Hero " 1"*--> Helmet
Helmet "2"--> Weapon

'for Game
GameInstance "1 " *-- "1 " Hero
GameInstance " 0..* " *--> GameObject
GameManager "~*" *-- " 1  " GameInstance

'for Chests
Weapon ..> Hero
WeaponChest "1   " --> Weapon
CoinChest "1..* " --> Coin
GameManager .right.> IOException: "<<throws>>"
GameManager .right.> ClassNotFoundException: "<<throws>>"
Weapon -- FlyingWeapon
Chest .left.> Hero
@enduml